import { CategoriesTree } from './models/categories_tree.js';
import { CounterMode } from './enums/counter_mode.js';
import { TreeItem } from './models/tree_item.js';
import { TheDocument } from './models/the_document.js';
import { ItemType } from './enums/item_type.js';
import { FieldType } from './enums/field_type.js';
import { WSIndexDataItem } from './models/ws_index_data_item.js';
import { StringIndexData } from './models/string_index_data.js';
import { WSStreamInfoWithData } from './models/ws_stream_info_with_data.js';
import { TheCase } from './models/the_case.js';
declare class Therefore {
    url: string;
    username: string;
    password: string;
    authHeader: string;
    apiVersion: string;
    tenant: string | null;
    constructor(url: string, username: string, password: string, tenant: string | null);
    getDocument: (this: Therefore, docNo: number, isCheckOutStatusNeeded: boolean | undefined, isIndexDataValuesNeeded: boolean | undefined, isStreamsInfoAndDataNeeded: boolean | undefined, isStreamsInfoNeeded: boolean | undefined, versionNo: number | undefined, isAccessMaskNeeded: boolean | undefined, titleHideCategory: boolean | undefined) => Promise<import("./interfaces/the_document_response.js").ITheDocumentResponse>;
    getDocumentStream: (this: Therefore, docNo: number, streamNo: number, versionNo?: number | undefined) => Promise<WSStreamInfoWithData>;
    getCaseDefinition: (this: Therefore, caseDefinitionNo: number) => Promise<TheCase>;
    createCase: (this: Therefore, theCase: TheCase) => Promise<TheCase>;
}
export { Therefore };
export { CategoriesTree };
export { TreeItem };
export { TheCase };
export { CounterMode };
export { TheDocument };
export { ItemType };
export { FieldType };
export { WSIndexDataItem };
export { StringIndexData };
export { WSStreamInfoWithData };
