{"version":3,"file":"therefore-node.esm.js","sources":["../src/models/categories_tree.ts","../src/enums/counter_mode.ts","../src/models/tree_item.ts","../src/models/the_document.ts","../src/enums/item_type.ts","../src/enums/field_type.ts","../src/models/ws_index_data_item.ts","../src/models/string_index_data.ts","../src/models/ws_stream_info_with_data.ts","../src/services/web_api.service.ts","../src/operations/document_operations.ts","../src/services/recursive_functions.ts","../src/operations/category_operations.ts","../src/operations/case_operations.ts","../src/models/the_case.ts","../src/operations/query_operations.ts","../src/models/date_index_data.ts","../src/models/int_index_data.ts","../src/enums/query_mode.ts","../src/operations/other_operations.ts","../src/therefore-node.ts"],"sourcesContent":["import { TreeItem } from '../therefore-node';\r\nimport { ICategoriesTree } from '../interfaces/categories_tree';\r\n\r\nexport class CategoriesTree implements ICategoriesTree {\r\n  TreeItems: TreeItem[];\r\n  constructor(treeItems: TreeItem[]) {\r\n    this.TreeItems = treeItems;\r\n  }\r\n}\r\n","export enum CounterMode {\n  'Undefined' = 0,\n  'ClientCounter' = 1,\n  'ServerCounter' = 2,\n}\n","// @ts-ignore\nimport { ItemType } from '../enums/item_type.js';\nimport { ITreeItem } from '../interfaces/tree_item';\n\nexport class TreeItem implements ITreeItem {\n  ChildItems: TreeItem[];\n  FolderType: number;\n  Guid: string;\n  ItemNo: number;\n  ItemType: number;\n  Name: string;\n  ParentCaseDefNo: number;\n  ParentFolderNo: number;\n\n  constructor(\n    childItems: TreeItem[],\n    folderType: number,\n    guid: string,\n    itemNo: number,\n    itemType: number,\n    name: string,\n    parentCaseDefNo: number,\n    parentFolderNo: number,\n  ) {\n    this.ChildItems = childItems;\n    this.FolderType = folderType;\n    this.Guid = guid;\n    this.ItemNo = itemNo;\n    this.ItemType = itemType;\n    this.Name = name;\n    this.ParentCaseDefNo = parentCaseDefNo;\n    this.ParentFolderNo = parentFolderNo;\n  }\n}\n","import { ITheDocument } from '../interfaces/the_document';\nimport { WSStreamInfoWithData } from './ws_stream_info_with_data';\nimport { ConversionOptions } from './conversion_options';\nimport { WSStreamInfoUploadSessionData } from './ws_stream_info_upload_session_data';\nimport { WSIndexDataItem } from './ws_index_data_item';\n\nexport class TheDocument implements ITheDocument {\n  CategoryNo: number;\n  IndexDataItems: WSIndexDataItem[] | null;\n  Streams: WSStreamInfoWithData[] | null;\n  DoFillDependentFields: boolean | null;\n  WithAutoAppendMode: number | null;\n  ConversionOptions: ConversionOptions | null;\n  LastChangeTime: string | undefined;\n  DontResetCategoryDefaults: boolean | undefined;\n  FileUploadSessions: WSStreamInfoUploadSessionData[] | null;\n\n  /**\n   * @param categoryNo\n   * The number of the category the document belongs to.\n   * @param indexDataItems\n   * Index data items of the document.\n   * @param streams\n   * Represents list of files to store within the document.\n   * @param doFillDependentFields\n   * Set to true or false to explicitly execute or skip FillDependentFields step while writing index data.\n   * If not set or null the old behavior will be used.\n   * That means the FillDependentFields step will be executed.\n   * Note: In order to update primary and dependent fields you can: 1. specify both values (for primary and dependent) or just for primary.\n   * In this case primary field will be used to lookup related value(s) for dependent field(s).\n   * Value of dependent field(s) from the request will be ignored. 2. specify value of dependent field(s) only.\n   * In this case if a unique primary field (related to given dependent field(s)) can be found it will be used.\n   * Otherwise, if there are many values found for primary field an error will be returned.\n   * @param withAutoAppendMode \n   * Sets auto append mode for the document.\n   * Null or omitted value means that auto append mode is Disabled.\n   * With Enabled auto append mode use IndexDataItems to specify unique identifier of the document.\n   * @param conversionOptions \n   * Specifies options to convert the files.\n   * @param fileUploadSessions \n   * Represents list of file upload sessions to be used to store files within the document.\n   * See the UploadSessionStart and UploadSessionAppendChunk methods for more details.\n   */\n  constructor(\n    categoryNo: number,\n    indexDataItems: WSIndexDataItem[],\n    streams: WSStreamInfoWithData[] | null = null,\n    doFillDependentFields: boolean | null = null,\n    withAutoAppendMode: number | null = null,\n    conversionOptions: ConversionOptions | null = null,\n    fileUploadSessions: WSStreamInfoUploadSessionData[] | null,\n  ) {\n    this.CategoryNo = categoryNo;\n    this.IndexDataItems = indexDataItems;\n    this.Streams = streams;\n    this.DoFillDependentFields = doFillDependentFields;\n    this.WithAutoAppendMode = withAutoAppendMode;\n    this.ConversionOptions = conversionOptions;\n    this.FileUploadSessions = fileUploadSessions;\n  }\n}\n","export enum ItemType {\n  'Root' = 0,\n  'Folder' = 1,\n  'Category' = 2,\n  'CaseDefinition' = 3,\n}\n","export enum FieldType {\n  'StringField' = 1,\n  'IntField ' = 2,\n  'DateField' = 3,\n  'LabelField' = 4,\n  'MoneyField' = 5,\n  'LogicalField' = 6,\n  'NumericCounter' = 8,\n  'TextCounter' = 9,\n  'TableField' = 10,\n  'CustomField' = 99,\n}\n","import { IWSIndexDataItem } from '../interfaces/ws_index_data_item.js';\r\nimport { AccessMask } from './access_mask.js';\r\nimport { DateIndexData } from './date_index_data.js';\r\nimport { DateTimeIndexData } from './date_time_index_data.js';\r\nimport { IntIndexData } from './int_index_data.js';\r\nimport { LogicalIndexData } from './logical_index_data.js';\r\nimport { MoneyIndexData } from './money_index_data.js';\r\nimport { MultipleKeywordData } from './multiple_keyword_data.js';\r\nimport { SingleKeywordData } from './single_keyword_data.js';\r\nimport { StringIndexData } from './string_index_data.js';\r\nimport { TableIndexData } from './table_index_data.js';\r\n\r\nexport class WSIndexDataItem implements IWSIndexDataItem {\r\n  DateIndexData?: DateIndexData;\r\n  IntIndexData?: IntIndexData;\r\n  LogicalIndexData?: LogicalIndexData;\r\n  MoneyIndexData?: MoneyIndexData;\r\n  MultipleKeywordData?: MultipleKeywordData;\r\n  SingleKeywordData?: SingleKeywordData;\r\n  StringIndexData?: StringIndexData;\r\n  TableIndexData?: TableIndexData; // ITableIndexData |\r\n  AccessMask?: AccessMask; // IAccessMask |\r\n  DateTimeIndexData?: DateTimeIndexData; // IDateTimeIndexData |\r\n\r\n  /**\r\n   * \r\n   * @param dateIndexData \r\n   * @param intIndexData \r\n   * @param logicalIndexData \r\n   * @param moneyIndexData \r\n   * @param multipleKeywordData \r\n   * @param singleKeywordData \r\n   * @param stringIndexData \r\n   * @param tableIndexData \r\n   * @param accessMask Gets access mask for index data field (column) for connected user.\r\n   * @param dateTimeIndexData \r\n   */\r\n  constructor(\r\n    dateIndexData: DateIndexData,\r\n    intIndexData: IntIndexData,\r\n    logicalIndexData: LogicalIndexData,\r\n    moneyIndexData: MoneyIndexData,\r\n    multipleKeywordData: MultipleKeywordData,\r\n    singleKeywordData: SingleKeywordData,\r\n    stringIndexData: StringIndexData,\r\n    tableIndexData: TableIndexData,\r\n    accessMask: AccessMask,\r\n    dateTimeIndexData: DateTimeIndexData,\r\n  ) {\r\n    this.DateIndexData = dateIndexData;\r\n    this.IntIndexData = intIndexData;\r\n    this.LogicalIndexData = logicalIndexData;\r\n    this.MoneyIndexData = moneyIndexData,\r\n    this.MultipleKeywordData = multipleKeywordData,\r\n    this.SingleKeywordData = singleKeywordData\r\n    this.StringIndexData = stringIndexData,\r\n    this.TableIndexData = tableIndexData,\r\n    this.AccessMask = accessMask,\r\n    this.DateTimeIndexData = dateTimeIndexData\r\n  }\r\n}\r\n","import { IStringIndexData } from '../interfaces/string_index_data';\n\nexport class StringIndexData implements IStringIndexData {\n  FieldNo: number;\n  DataValue: string | null;\n  FieldName?: string;\n\n  /**\n   * \n   * @param fieldNo \n   * Gets or sets the number of the field.\n   * Doing request set it to proper field number or to 0 (zero) in order to use the FieldName property instead.\n   * @param dataValue \n   * Gets or sets the string value of the field.\n   * @param fieldName \n   * Gets or sets the name (actually column name) of the field.\n   * Doing request set the FieldNo property to 0 (zero) in order to use specified FieldName.\n   */\n  constructor(fieldNo: number, dataValue: string | null, fieldName: string) {\n    this.FieldNo = fieldNo;\n    this.DataValue = dataValue;\n    this.FieldName = fieldName;\n  }\n}\n","import { IWSStreamInfoWithData } from '../interfaces/ws_stream_info_with_data';\n\nexport class WSStreamInfoWithData implements IWSStreamInfoWithData {\n  FileData: number[] | null;\n  FileName: string | null;\n  StreamNo: number | null;\n\n  constructor(fileData: number[], fileName: string) {\n    this.FileData = fileData;\n    this.FileName = fileName;\n    this.StreamNo = null;\n  }\n}\n","import { Therefore } from '../therefore-node';\r\n\r\nexport class WebApi {\r\n  async post(this: Therefore, endPoint: string, body?: any, rawBody?: any, headers?: any) {\r\n    let request = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: this.authHeader,\r\n      },\r\n    }\r\n    if(body){\r\n      request = {...request, ...{body: JSON.stringify(body)}}\r\n    }\r\n    if(rawBody){\r\n      request = {...request, ...{body: rawBody}}\r\n    }\r\n    if(this.tenant){\r\n      request.headers = {...request.headers, ...{TenantName: this.tenant}}\r\n    }\r\n    if(this.client_type){\r\n      request.headers = {...request.headers, ...{\"The-Client-Type\": this.client_type}}\r\n    }\r\n    if(headers) {\r\n      request.headers = {...request.headers, ...headers}\r\n    }\r\n    console.log(request)\r\n    const response = await fetch(this.url + this.apiVersion + endPoint, request);\r\n    if (response.status === 500) {\r\n      let body = await response.text();\r\n      console.error(body);\r\n      throw new Error(`POST ${endPoint} failed`);\r\n    }\r\n    return response.json()\r\n  }\r\n}\r\n","import { ICategoryInfo } from '../interfaces/category_info';\r\nimport { ITheDocumentResponse } from '../interfaces/the_document_response';\r\nimport { ConversionOptions } from '../models/conversion_options';\r\nimport { TheDocument } from '../models/the_document';\r\nimport { WSIndexDataItem } from '../models/ws_index_data_item';\r\nimport { WSStreamInfoUploadSessionData } from '../models/ws_stream_info_upload_session_data';\r\nimport { WSStreamInfoWithData } from '../models/ws_stream_info_with_data';\r\nimport { WebApi } from '../services/web_api.service';\r\nimport { Therefore } from '../therefore-node';\r\nexport class DocumentOperations {\r\n  \r\n  async createDocument(this: Therefore, document: TheDocument) {\r\n\r\n    const body = document\r\n\r\n    const data = await WebApi.prototype.post.call(this,'CreateDocument', body)\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Retrieves document by DocNo from Therefore\r\n   * @param this ThereforeClient\r\n   * @param docNo Document Number for document to be retrieved\r\n   * @param isCheckOutStatusNeeded \r\n   * @param isIndexDataValuesNeeded Get Category IndexData \r\n   * @param isStreamsInfoAndDataNeeded Get Streams info and files\r\n   * @param isStreamsInfoNeeded Get Streams info only\r\n   * @param versionNo Specify which document version to get\r\n   * @param isAccessMaskNeeded \r\n   * @param titleHideCategory \r\n   * @returns TheDocument\r\n   */\r\n  async getDocument(\r\n    this: Therefore, \r\n    docNo: number, \r\n    isCheckOutStatusNeeded?: boolean,\r\n    isIndexDataValuesNeeded?: boolean,\r\n    isStreamsInfoAndDataNeeded?: boolean,\r\n    isStreamsInfoNeeded?: boolean,\r\n    versionNo?: number,\r\n    isAccessMaskNeeded?: boolean,\r\n    titleHideCategory?: boolean\r\n    ): Promise<TheDocument>{\r\n      console.log(`Getting Document...`);\r\n\r\n      const body = {\r\n        \"DocNo\": docNo,\r\n        \"IsCheckOutStatusNeeded\": isCheckOutStatusNeeded,\r\n        \"IsIndexDataValuesNeeded\": isIndexDataValuesNeeded,\r\n        \"IsStreamsInfoAndDataNeeded\": isStreamsInfoAndDataNeeded,\r\n        \"IsStreamsInfoNeeded\": isStreamsInfoNeeded,\r\n        \"VersionNo\": versionNo,\r\n        \"IsAccessMaskNeeded\": isAccessMaskNeeded,\r\n        \"TitleHideCategory\": titleHideCategory,\r\n      };\r\n      \r\n      const data = await WebApi.prototype.post.call(this,'GetDocument', body)\r\n\r\n      return data;\r\n    }\r\n\r\n    async getDocumentStream(\r\n      this: Therefore,\r\n      docNo: number,\r\n      streamNo: number,\r\n      versionNo?: number\r\n      ): Promise<WSStreamInfoWithData>{\r\n        console.log(`Getting Document Stream...`);\r\n  \r\n        const body = {\r\n          \"DocNo\": docNo,\r\n          \"StreamNo\": streamNo,\r\n          \"VersionNo\": versionNo\r\n        };\r\n\r\n        const data = await WebApi.prototype.post.call(this,'GetDocumentStream', body)\r\n\r\n        return data;\r\n      }\r\n}\r\n","import { ItemType } from '../enums/item_type.js';\nimport { CategoriesTree } from '../models/categories_tree.js';\nimport { TreeItem } from '../models/tree_item.js';\n\nexport const recursiveCategoriesTreePrint = (categoriesTree: CategoriesTree) => {\n  categoriesTree.TreeItems.forEach((treeItem) => recursiveTreeItemPrint(treeItem));\n};\n\nexport const recursiveTreeItemPrint = (treeItem: TreeItem) => {\n  console.log(`ItemName: ${treeItem.Name}, ItemType: ${ItemType[treeItem.ItemType]}`);\n  if (treeItem.ChildItems.length > 0) treeItem.ChildItems.forEach((childItem) => recursiveTreeItemPrint(childItem));\n};\n\nexport const recursiveCategoriesTreeFindCategory = (\n  categoriesTree: CategoriesTree,\n  categoryName: string,\n): TreeItem | undefined => {\n  let result: TreeItem | undefined;\n  const setResult = (treeItem: TreeItem) => (result = treeItem);\n  categoriesTree.TreeItems.forEach((treeItem) => recursiveTreeItemPrintFindCategory(treeItem, categoryName, setResult));\n  return result;\n};\n\nexport const recursiveTreeItemPrintFindCategory = (\n  treeItem: TreeItem,\n  categoryName: string,\n  callback: (treeItem: TreeItem) => TreeItem | undefined,\n) => {\n  let categoryFound = false;\n  if (treeItem.Name === categoryName && treeItem.ItemType === ItemType.Category) {\n    callback(treeItem);\n    categoryFound = true;\n  }\n  if (!categoryFound && treeItem.ChildItems.length > 0)\n    treeItem.ChildItems.forEach((childItem) => recursiveTreeItemPrintFindCategory(childItem, categoryName, callback));\n};\n","import { ICategoryInfo } from '../interfaces/category_info';\r\nimport { IGetCaseDocumentsResponse } from '../interfaces/get_case_documents_response';\r\nimport { recursiveCategoriesTreeFindCategory } from '../services/recursive_functions';\r\nimport { WebApi } from '../services/web_api.service';\r\nimport { CategoriesTree, Therefore, TreeItem } from '../therefore-node';\r\nexport class CategoryOperations {\r\n\r\n  async getCategoriesTree(this: Therefore): Promise<CategoriesTree> {\r\n    console.log('Getting Categories Tree')\r\n    \r\n    const data = await WebApi.prototype.post.call(this,'GetCategoriesTree', {})\r\n    return data;\r\n  }\r\n\r\n  async getCategoryNo(this: Therefore, CategoryName: string): Promise<number | undefined> {\r\n    console.log('Getting Category No')\r\n    let categoriesTree = await CategoryOperations.prototype.getCategoriesTree.call(this)\r\n\r\n    let resultTreeItem: TreeItem | undefined = recursiveCategoriesTreeFindCategory(categoriesTree, CategoryName);\r\n\r\n    if(resultTreeItem){\r\n        return resultTreeItem.ItemNo\r\n    } else {\r\n        return undefined\r\n    }\r\n  }\r\n\r\n  async getCategoryInfo(this: Therefore, CategoryNo: number): Promise<ICategoryInfo> {\r\n    console.log('Getting Category Info')\r\n\r\n    const body = {\r\n      CategoryNo: CategoryNo,\r\n    };\r\n\r\n    const data = await WebApi.prototype.post.call(this,'GetCategoryInfo', body)\r\n    return data;\r\n  }\r\n}\r\n","import { IGetCaseDocumentsResponse } from '../interfaces/get_case_documents_response';\r\nimport { TheCase } from '../models/the_case';\r\nimport { TheCaseDefinition } from '../models/the_case_definition';\r\nimport { WebApi } from '../services/web_api.service';\r\nimport { Therefore } from '../therefore-node';\r\n\r\nexport class CaseOperations {\r\n  async closeCase(this: Therefore, caseNo: number): Promise<void> {\r\n    const body = {\r\n      CaseNo: caseNo,\r\n    };\r\n\r\n    const request = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: this.authHeader,\r\n      },\r\n      body: JSON.stringify(body),\r\n    };\r\n\r\n    if (this.tenant != null) {\r\n      request.headers = { ...request.headers, ...{ TenantName: this.tenant } };\r\n    }\r\n    const response = await fetch(this.url + this.apiVersion + 'CloseCase', request);\r\n    if (response.status === 500) {\r\n      let body = await response.text();\r\n      console.error(body);\r\n      throw new Error('Getting Categories tree failed');\r\n    }\r\n    return;\r\n  }\r\n\r\n  async createCase(this: Therefore, theCase: TheCase): Promise<TheCase> {\r\n    console.log('Creating Case...');\r\n    const data = await WebApi.prototype.post.call(this,'CreateCase', theCase)\r\n    return data;\r\n  }\r\n\r\n  async updateCase(this: Therefore, theCase: TheCase): Promise<TheCase> {\r\n    console.log('Updating Case...')\r\n    const data = await WebApi.prototype.post.call(this,'SaveCaseIndexData', theCase)\r\n    return data\r\n  }\r\n\r\n  async getCaseDefinition(this: Therefore, caseDefinitionNo: number): Promise<TheCase> {\r\n    console.log('Getting CaseDefinition...')\r\n\r\n    const body = {\r\n      CaseDefinitionNo: caseDefinitionNo\r\n    }\r\n\r\n    const data = await WebApi.prototype.post.call(this,'GetCaseDefinition', body)\r\n    return data\r\n  }\r\n\r\n  async deleteCase(this: Therefore, caseNo: number): Promise<void> {\r\n    console.log('Deleting Case...')\r\n\r\n    const body = {\r\n      CaseNo: caseNo,\r\n    };\r\n\r\n    await WebApi.prototype.post.call(this,'DeleteCase', body)\r\n    return\r\n  }\r\n\r\n  async getCase(this: Therefore, caseNo: number): Promise<TheCase> {\r\n    console.log('Getting Case...')\r\n\r\n    const body = {\r\n      CaseNo: caseNo,\r\n    };\r\n    \r\n    const data = await WebApi.prototype.post.call(this,'GetCase', body)\r\n    return data\r\n  }\r\n\r\n  async getCaseDocuments(this: Therefore, CaseNo: number, CategoryNo?: number) : Promise<IGetCaseDocumentsResponse> {\r\n    console.log('Getting Case Documents')\r\n\r\n    const body = {\r\n      CaseNo: CaseNo,\r\n      CategoryNo: CategoryNo\r\n    };\r\n\r\n    const data = await WebApi.prototype.post.call(this,'GetCaseDocuments', body)\r\n    return data;\r\n  }\r\n\r\n  async saveCaseIndexDataQuick(this: Therefore, caseNo: number, updatedCase: TheCase) {\r\n    const data = await WebApi.prototype.post.call(this, 'SaveCaseIndexDataQuick', {\r\n      CaseNo: caseNo,\r\n      IndexData: {\r\n        IndexDataItems: updatedCase.IndexDataItems\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n","import { ITheCase } from \"../interfaces/the_case\";\r\nimport { WSIndexDataItem } from \"./ws_index_data_item\";\r\n\r\nexport class TheCase implements ITheCase{\r\n    CaseDefNo: number;\r\n    IndexDataItems: WSIndexDataItem[] | null;\r\n    DoFillDependentFields: boolean | null;\r\n    constructor(caseDefNo: number, indexDataItems: any[] | null, doFillDependentFields: boolean | null){\r\n        this.CaseDefNo = caseDefNo,\r\n        this.IndexDataItems = indexDataItems,\r\n        this.DoFillDependentFields = doFillDependentFields\r\n    }\r\n}","import { Query } from '../models/query';\r\nimport { WebApi } from '../services/web_api.service';\r\nimport { Therefore } from '../therefore-node';\r\n\r\nexport interface IWSCondition {\r\n  Condition: String,\r\n  FieldNoOrName: String,\r\n}\r\n\r\nexport class QueryOperations {\r\n \r\n  async executeMultiQuery (this: Therefore, queries: Query[], fullText?: string) {\r\n    console.log('Executing MultiQuery...')\r\n    let body = {\r\n      FullText: fullText,\r\n      Queries: queries\r\n    }\r\n    const data = await WebApi.prototype.post.call(this, 'ExecuteMultiQuery', body)\r\n    return data\r\n  }\r\n\r\n  async executeSingleQuery (this: Therefore, query: Query, fullText?: string) {\r\n    console.log('Executing SingleQuery...')\r\n    const data = await WebApi.prototype.post.call(this, 'ExecuteSingleQUery', {Query: query, FullText: fullText})\r\n    return data\r\n  }\r\n\r\n}\r\n\r\n","import { IDateIndexData } from \"../interfaces/date_index_data\";\r\n\r\nexport class DateIndexData implements IDateIndexData {\r\n  FieldNo: number;\r\n  DataValue: string | null;\r\n  DataISO8601Value: string | null;\r\n  FieldName?: string;\r\n\r\n  /**\r\n   * \r\n   * @param fieldNo \r\n   * Gets or sets the number of the field.\r\n   * Doing request set it to proper field number or to 0 (zero) in order to use the FieldName property instead.\r\n   * @param dataValue \r\n   * Gets or sets the string value of the field.\r\n   * @param dataISO8601Value\r\n   * Gets or sets date value of the field in ISO 8601 format (YYYY-MM-DD, example 2017-07-23).\r\n   * See also the *DataValue* property.\r\n   * The DataValue property is ignored if the DataISO8601Value property has a value.\r\n   * @param fieldName \r\n   * Gets or sets the name (actually column name) of the field.\r\n   * Doing request set the FieldNo property to 0 (zero) in order to use specified FieldName.\r\n   */\r\n  constructor(fieldNo: number, dataValue: string | null, dataISO8601Value: string | null, fieldName: string) {\r\n    this.FieldNo = fieldNo;\r\n    this.DataValue = dataValue;\r\n    this.DataISO8601Value = dataISO8601Value\r\n    this.FieldName = fieldName;\r\n  }\r\n}\r\n","import { IIntIndexData } from \"../interfaces/int_index_data\";\r\n\r\nexport class IntIndexData implements IIntIndexData {\r\n  FieldNo: number;\r\n  DataValue: number | null;\r\n  FieldName?: string;\r\n\r\n  /**\r\n   * \r\n   * @param fieldNo \r\n   * Gets or sets the number of the field.\r\n   * Doing request set it to proper field number or to 0 (zero) in order to use the FieldName property instead.\r\n   * @param dataValue \r\n   * Gets or sets the integer value of the field.\r\n   * @param fieldName \r\n   * Gets or sets the name (actually column name) of the field.\r\n   * Doing request set the FieldNo property to 0 (zero) in order to use specified FieldName.\r\n   */\r\n  constructor(fieldNo: number, dataValue: number | null, fieldName: string) {\r\n    this.FieldNo = fieldNo;\r\n    this.DataValue = dataValue;\r\n    this.FieldName = fieldName;\r\n  }\r\n}\r\n","export enum QueryMode {\r\n    'NormalQuery' = 0,\r\n    'FileQuery' = 1,\r\n    'WorkflowQuery' = 4,\r\n    'CaseQuery' = 5\r\n  }\r\n  ","import { WebApi } from \"../services/web_api.service\";\r\nimport { Therefore } from \"../therefore-node\";\r\nimport * as fs from \"fs\"\r\n\r\nexport class OtherOperations {\r\n\r\n    async uploadSessionStart(this: Therefore, fileSize: number, fileExtension?: string): Promise<string> {\r\n      \r\n        const body = {\r\n            \"FileSize\": fileSize,\r\n            \"FileExstension\": fileExtension\r\n        }\r\n      \r\n        const data = await WebApi.prototype.post.call(this,'UploadSessionSTart', body)\r\n        return data;\r\n    }\r\n\r\n    async uploadSessionAppendChunkRaw(this: Therefore, sessionId: string, chunkPosition: number = 0, filePath: string) {\r\n        const body = fs.readFileSync(filePath)\r\n\r\n        const headers = {\r\n            \"Content-Type\": \"application/octet-stream\",\r\n            \"X-The-UploadSession-ChunkPosition\": chunkPosition,\r\n            \"X-The-UploadSession-Id\": sessionId\r\n        }\r\n\r\n        const data = await WebApi.prototype.post.call(this,'UploadSessionAppendChunkRaw', undefined, body, headers)\r\n        return data;\r\n    }\r\n}","\r\nimport \"isomorphic-fetch\"\r\n\r\nimport { CategoriesTree } from './models/categories_tree.js';\r\nimport { ICategoryInfo } from './interfaces/category_info.js';\r\nimport { CounterMode } from './enums/counter_mode.js';\r\nimport { TreeItem } from './models/tree_item.js';\r\nimport { TheDocument } from './models/the_document.js';\r\nimport { ItemType } from './enums/item_type.js';\r\nimport { FieldType } from './enums/field_type.js';\r\nimport { WSIndexDataItem } from './models/ws_index_data_item.js';\r\nimport { StringIndexData } from './models/string_index_data.js';\r\nimport { WSStreamInfoWithData } from './models/ws_stream_info_with_data.js';\r\nimport { DocumentOperations } from './operations/document_operations.js';\r\nimport { CategoryOperations } from './operations/category_operations.js';\r\nimport { CaseOperations } from './operations/case_operations.js';\r\nimport { TheCase } from './models/the_case.js';\r\nimport { IGetCaseDocumentsResponse } from './interfaces/get_case_documents_response.js';\r\nimport { QueryOperations } from './operations/query_operations.js';\r\nimport { DateIndexData } from './models/date_index_data.js';\r\nimport { IntIndexData } from './models/int_index_data.js';\r\nimport { QueryMode } from './enums/query_mode.js';\r\nimport { OtherOperations } from './operations/other_operations.js';\r\nclass Therefore {\r\n  url: string;\r\n  username: string;\r\n  password: string;\r\n  authHeader: string;\r\n  apiVersion: string;\r\n  tenant?: string;\r\n  client_type?: number;\r\n\r\n  constructor(url: string, username: string, password: string, tenant?: string, client_type?: number) {\r\n    url.slice(-1) == '/' ? (this.url = url) : (this.url = url + '/');\r\n    this.username = username;\r\n    this.password = password;\r\n    this.authHeader = 'Basic ' + Buffer.from(username + ':' + password).toString('base64');\r\n    this.apiVersion = 'theservice/v0001/restun/';\r\n    this.tenant = tenant,\r\n    this.client_type = client_type\r\n  }\r\n\r\n  //Document operations\r\n  public createDocument = DocumentOperations.prototype.createDocument\r\n  public getDocument = DocumentOperations.prototype.getDocument\r\n  public getDocumentStream = DocumentOperations.prototype.getDocumentStream\r\n  //Case Operations\r\n  public getCaseDefinition = CaseOperations.prototype.getCaseDefinition\r\n  public createCase = CaseOperations.prototype.createCase\r\n  public closeCase = CaseOperations.prototype.closeCase\r\n  public updateCase = CaseOperations.prototype.updateCase\r\n  public deleteCase = CaseOperations.prototype.deleteCase\r\n  public getCase = CaseOperations.prototype.getCase\r\n  public getCaseDocuments = CaseOperations.prototype.getCaseDocuments\r\n  public saveCaseIndexDataQuick = CaseOperations.prototype.saveCaseIndexDataQuick\r\n  //Category Operations\r\n  public getCategoriesTree = CategoryOperations.prototype.getCategoriesTree\r\n  public getCategoryNo = CategoryOperations.prototype.getCategoryNo\r\n  public getCategoryInfo = CategoryOperations.prototype.getCategoryInfo\r\n  //Query Operations\r\n  public executeMultiQuery = QueryOperations.prototype.executeMultiQuery\r\n  public executeSingleQuery = QueryOperations.prototype.executeSingleQuery\r\n  //Other Operations\r\n  public uploadSessionStart = OtherOperations.prototype.uploadSessionStart\r\n  public uploadSessionAppendChunkRaw = OtherOperations.prototype.uploadSessionAppendChunkRaw\r\n}\r\n\r\nexport { Therefore };\r\nexport { CategoriesTree };\r\nexport { TreeItem };\r\nexport { TheCase };\r\nexport { CounterMode };\r\nexport { TheDocument };\r\nexport { ItemType };\r\nexport { FieldType };\r\nexport { WSIndexDataItem };\r\nexport { StringIndexData };\r\nexport { WSStreamInfoWithData };\r\nexport { ICategoryInfo }\r\nexport { IGetCaseDocumentsResponse }\r\nexport { DateIndexData }\r\nexport { IntIndexData }\r\nexport { QueryMode }"],"names":[],"mappings":"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"}